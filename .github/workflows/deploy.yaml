name: Deploy to Kubernetes

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Build Docker Images
        env:
          DOCKER_BUILDKIT: 1
          cloud_sql_connection_name: "${{ secrets.CLOUD_SQL_CONNECTION_NAME }}"
          database_port: "${{ secrets.DB_PORT }}"
          database_password: "${{ secrets.DB_PASSWORD }}"
          database_name: "${{ secrets.DB_NAME }}"
          database_username: "${{ secrets.DB_USER }}"
          secret_key: "${{ secrets.SECRET_KEY }}"
          algorithm: "${{ secrets.ALGORITHM }}"
          mail_api_key: "${{ secrets.MAIL_API_KEY }}"
          email_template_id: "${{ secrets.EMAIL_TEMPLATE_ID }}"
          password_salt: "${{ secrets.PASSWORD_SALT }}"
          from_email: "info@destinationsurf.com"
          PROJECT_ID: "${{ secrets.GCP_PROJECT_ID }}"
          KUBERNETES_SERVICE_HOST: "True"
        run: |
          docker-compose -f docker-compose-gcp.yml build --no-cache
          # Tag the images with the registry name and version
          docker tag backend:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:latest
          docker tag frontend:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest

      - name: Docker push
        run: |
          # Push the images to GCP Container Registry
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:latest
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:latest

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Replace project ID in k8s deployment
        run: |
          sed -i "s/\${PROJECT_ID}/${{ secrets.GCP_PROJECT_ID }}/g" k8s/frontend_deployment.yaml
          sed -i "s/\${PROJECT_ID}/${{ secrets.GCP_PROJECT_ID }}/g" k8s/backend_deployment.yaml

      - name: Apply Kubernetes Configuration
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.ZONE }}
          kubectl apply -f k8s/backend_deployment.yaml
          kubectl apply -f k8s/backend_service.yaml
          kubectl apply -f k8s/frontend_deployment.yaml
          kubectl apply -f k8s/frontend_service.yaml
          kubectl rollout restart deployment destination-service
          kubectl rollout restart deployment destination-frontend

      - name: Install cert-manager
        run: |
          echo "Downloading cert-manager manifest for version 1.81..."
          curl -L -o cert-manager.yaml "https://github.com/jetstack/cert-manager/releases/download/1.81/cert-manager.yaml"

          echo "Creating cert-manager namespace (if not exists)..."
          kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
        
          echo "Applying cert-manager manifest..."
          kubectl apply -f cert-manager.yaml
        
          echo "Waiting for cert-manager to be ready..."
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-cainjector -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-webhook -n cert-manager

      - name: Create Let's Encrypt ClusterIssuer
        env:
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        run: |
          if ! kubectl get clusterissuer letsencrypt > /dev/null 2>&1; then
            sed -i "s/your-email@example.com/${EMAIL_ADDRESS}/g" k8s/letsencrypt-clusterissuer.yaml
            kubectl apply -f k8s/letsencrypt-clusterissuer.yaml
          fi

      - name: Reserve static IP address
        run: |
          if ! gcloud compute addresses describe frontend-ip --global > /dev/null 2>&1; then
            gcloud compute addresses create frontend-ip --global
          fi

      - name: Update ingress.yaml
        env:
          EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        run: |
          RESERVED_IP=$(gcloud compute addresses describe frontend-ip --global --format="value(address)")
          sed -i "s/your-email@example.com/${EMAIL_ADDRESS}/g" k8s/ingress.yaml

      - name: Apply Ingress and other related resources
        run: |
          kubectl apply -f k8s/ingress.yaml

      - name: Output reserved IP address
        run: |
          RESERVED_IP=$(gcloud compute addresses describe frontend-ip --global --format="value(address)")
          echo "Frontend IP Address: $RESERVED_IP"

